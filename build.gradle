buildscript {
    repositories {
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/releases/"
        }
        mavenCentral()
        mavenLocal()

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        jcenter()

    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1'
        classpath 'org.ajoberstar:gradle-git:0.12.0'
    }

}

apply plugin: 'forge'

version = "1.4.0-beta2"
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.7
targetCompatibility = 1.7
project.ext.gitCommitHash = ""

if (!project.hasProperty("gitCommitHash")) {
    try {
        def repo = Grgit.open(project.file('.'))
        project.ext.gitCommitHash = repo.head().abbreviatedId
    } catch (Exception e) {
        project.ext.gitCommitHash = "no_git_id"
    }
}

minecraft {
    version = "1.7.10-10.13.1.1225"
    runDir = "rundir"
    ext.forgeVersion = "10.13.1.1225"

    replaceIn "com/forgeessentials/core/preloader/FEModContainer.java"
    replace "%VERSION%", project.version

    replaceIn "com/forgeessentials/client/ForgeEssentialsClient.java"
    replace "%VERSION%", project.version
}

configurations {
    serverLibs
}

sourceSets {

    utils {
        compileClasspath = files(project.configurations.compile, project.sourceSets.api.output)
    }

    main {
        compileClasspath = files(project.configurations.compile, project.sourceSets.utils.output, project.sourceSets.api.output)
    }

    client {
        compileClasspath = files(project.configurations.compile, project.sourceSets.utils.output, project.sourceSets.api.output)
    }

    weintegration {
        compileClasspath = files(project.configurations.compile, project.sourceSets.main.output, project.sourceSets.utils.output, project.sourceSets.api.output)
    }
}

repositories {
    mavenLocal()
    maven {
        name = "sk89q"
        url = "http://maven.sk89q.com/repo/"
    }
}

dependencies {

    compile 'org.pircbotx:pircbotx:1.9' //chat - irc stuff

    //datasaving
    compile 'com.h2database:h2:1.3.175'
    compile 'mysql:mysql-connector-java:5.1.22'

    // just for shits and giggles
    compile "org.projectlombok:lombok:1.14.6"

    // WE integration -
    compile 'com.sk89q.worldedit:worldedit-forge-mc1.7.10:6.0.0-SNAPSHOT'

    serverLibs 'org.pircbotx:pircbotx:1.9'
    serverLibs 'com.h2database:h2:1.3.175'
    serverLibs 'mysql:mysql-connector-java:5.1.22'
    serverLibs files('lib/minecraftforge-10.13.0.0-permsAPIonly.jar')
}

jar {
    from project.sourceSets.main.output
    exclude "com/forgeessentials/client/**"

    from project.sourceSets.utils.output

    classifier = 'server'
    appendix = project.minecraft.version
    manifest {
        attributes("FMLCorePlugin": "com.forgeessentials.core.preloader.FEPreLoader",
                "FMLCorePluginContainsFMLMod": "true",
                "BuildID": project.ext.gitCommitHash)
    }

    configurations.serverLibs.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

}

javadoc {
    include "com/forgeessentials/api/**"
}

processClientResources {
    from(sourceSets.client.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeversion': project.minecraft.forgeVersion
        include 'mcmod.info'
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeVersion': project.minecraft.forgeVersion
        include 'mcmod.info'
    }
}

//client
task clientJar(dependsOn: "jar", type: Jar) {
    from sourceSets.client.output
    classifier = "client"
    appendix = project.minecraft.version
    include "**"

    from project.sourceSets.utils.output
    include "**"
    manifest {
        attributes("BuildID": project.ext.gitCommitHash)
    }

}

//core DEOBF use for development

// to use: declare dependency com.forgeessentials:forgeessentials:<version>:deobf
task deobfJar(dependsOn: "jar", type: Jar) {
    from project.sourceSets.main.output
    include "**"

    from project.sourceSets.api.output
    include "**"

    from project.sourceSets.utils.output
    include "**"

    manifest {
        attributes("FMLCorePlugin": "com.forgeessentials.core.preloader.FEPreLoader",
                "FMLCorePluginContainsFMLMod": "true",
                "BuildID": project.ext.gitCommitHash)
    }
    classifier = 'deobf'
    appendix = project.minecraft.version
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    include "com/forgeessentials/api/**"
    classifier = 'sources'
    appendix = project.minecraft.version
    manifest {
        attributes("BuildID": project.ext.gitCommitHash)
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
    appendix = project.minecraft.version
    manifest {
        attributes("BuildID": project.ext.gitCommitHash)
    }
}

reobf {
    reobf(clientJar) { reobfSpec ->
        reobfSpec.classpath = project.sourceSets.main.compileClasspath
    }
}

artifacts {
    archives clientJar
    archives deobfJar
    archives sourceJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}
