buildscript {
    repositories {
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/releases/"
        }
        mavenCentral()
        mavenLocal()

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        jcenter()

    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1'
        classpath 'org.ajoberstar:gradle-git:0.12.0'
    }

}

apply plugin: 'forge'

version = "1.4.0-beta8"
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.7
targetCompatibility = 1.7
project.ext.build = '0'
if (System.getenv('BUILD_NUMBER') != null)
    project.ext.build = System.getenv('BUILD_NUMBER')

import org.ajoberstar.grgit.Grgit

def repo = Grgit.open(project.file('.'))
project.ext.gitCommitHash = repo.log().find().abbreviatedId

if (JavaVersion.current().isJava8Compatible()) {
    // Java 8 turns on doclint which we fail
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

minecraft {
    version = "1.7.10-10.13.2.1291"
    runDir = "rundir"
    ext.forgeVersion = "10.13.2.1291"

    replaceIn "com/forgeessentials/commons/VersionUtils.java"
    replace "%VERSION%", project.version

    //srgExtra "PK: org/spongepowered/asm com/forgeessentials/repackage/org_spongepowered/asm"
}

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + 'mixins.srg'

afterEvaluate {
    tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}"]
    tasks.compileUtilsJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}"]
    tasks.compileClientJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}"]

}


configurations {
    serverLibs
    includeMod
    shade
    myCompile
    myCompile.extendsFrom shade
    compile.extendsFrom myCompile
}

sourceSets {

    utils {
        compileClasspath = files(project.configurations.compile, project.sourceSets.api.output)
    }

    main {
        compileClasspath = files(project.configurations.compile, project.sourceSets.utils.output, project.sourceSets.api.output)
    }

    client {
        compileClasspath = files(project.configurations.compile, project.sourceSets.utils.output, project.sourceSets.api.output)
    }
}

repositories {
    //mavenLocal()
    maven {
        name = "sk89q"
        url = "http://maven.sk89q.com/repo/"
    }
    maven {
        name = "sponge"
        url = "http://repo.spongepowered.org/maven/"
    }
}

dependencies {

    myCompile 'org.pircbotx:pircbotx:1.9' //chat - irc stuff

    //datasaving
    myCompile 'com.h2database:h2:1.3.175'
    myCompile 'mysql:mysql-connector-java:5.1.22'
    myCompile 'org.hibernate:hibernate-entitymanager:4.3.7.Final'
    myCompile 'org.hibernate:hibernate-jpamodelgen:4.3.7.Final'
    //myCompile 'org.eclipse.persistence:eclipselink:2.6.0'

    // WE integration
    myCompile 'com.sk89q.worldedit:worldedit-forge-mc1.7.10:6.0.2-SNAPSHOT:dev'

    // mixins
    shade 'org.spongepowered:mixin:0.4.3'

    serverLibs 'org.pircbotx:pircbotx:1.9'
    serverLibs 'com.h2database:h2:1.3.175'
    serverLibs 'mysql:mysql-connector-java:5.1.22'
    serverLibs 'org.hibernate:hibernate-entitymanager:4.3.7.Final'
    //serverLibs 'org.eclipse.persistence:eclipselink:2.6.0'
    
    includeMod files('lib/worldedit-forge-mc1.7.10-6.0.2-SNAPSHOT-dist.jar')
}

//libraries
task completeZip(type: Zip) {
    archiveName = "libraries.zip"
    destinationDir = jar.destinationDir

    from(project.configurations.serverLibs) {
        include '*'
        into('ForgeEssentials/lib')
    }
    from(project.configurations.includeMod) {
        include '*'
        into('mods')
    }
    jar {
        from fileTree(completeZip.archivePath)
    }
}

jar {
    dependsOn 'completeZip'
    from project.sourceSets.main.output
    exclude "com/forgeessentials/client/**"

    from project.sourceSets.utils.output

    classifier = 'server'
    appendix = project.minecraft.version
    manifest {
        attributes(
                "BuildID": project.ext.gitCommitHash,
                "Build-Number": project.ext.build,
                "TweakClass": "com.forgeessentials.core.preloader.FELaunchHandler",
                "TweakOrder": "0",
                "FMLCorePluginContainsFMLMod": "true",
                "ForceLoadAsMod": "true",
                "FMLAT": "forgeessentials_at.cfg",
                "MixinConfigs": "mixins.forgeessentials.json"
        )
    }
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            include "org/spongepowered/asm/**"
        }
    }
}

javadoc {
    include "com/forgeessentials/api/**"
}

processClientResources {
    from(sourceSets.client.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeversion': project.minecraft.forgeVersion
        include 'mcmod.info'
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeVersion': project.minecraft.forgeVersion
        include 'mcmod.info'
    }
}

reobf.addExtraSrgFile mixinSrg

//client
task clientJar(dependsOn: "jar", type: Jar) {
    from sourceSets.client.output
    classifier = "client"
    appendix = project.minecraft.version
    include "**"

    from project.sourceSets.utils.output
    include "**"
    manifest {
        attributes("BuildID": project.ext.gitCommitHash, "Build-Number": project.ext.build)
    }


}

//core DEOBF use for development

// to use: declare dependency com.forgeessentials:forgeessentials:<version>:
task deobfJar(dependsOn: "jar", type: Jar) {
    from project.sourceSets.main.output
    include "**"

    from project.sourceSets.api.output
    include "**"

    from project.sourceSets.utils.output
    include "**"

    from project.sourceSets.client.output
    include "com/forgeessentials/**"
    // config guis won't work, but who cares, anyway?

    manifest {
        attributes(
                "BuildID": project.ext.gitCommitHash,
                "Build-Number": project.ext.build,
                "TweakClass": "com.forgeessentials.core.preloader.FELaunchHandler",
                "TweakOrder": "0",
                "FMLCorePluginContainsFMLMod": "true",
                "ForceLoadAsMod": "true",
                "FMLAT": "forgeessentials_at.cfg",
                "MixinConfigs": "mixins.forgeessentials.json"
        )
        classifier = 'deobf'
        appendix = project.minecraft.version
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    include "com/forgeessentials/api/**"
    classifier = 'sources'
    appendix = project.minecraft.version
    manifest {
        attributes("BuildID": project.ext.gitCommitHash, "Build-Number": project.ext.build)
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
    appendix = project.minecraft.version
    manifest {
        attributes("BuildID": project.ext.gitCommitHash, "Build-Number": project.ext.build)
    }
}

reobf {
    reobf(clientJar) { reobfSpec ->
        reobfSpec.classpath = project.sourceSets.main.compileClasspath
    }
}

artifacts {
    archives clientJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

task cleanLibFiles(dependsOn: "check", type: Delete) {
    delete(completeZip.archivePath)
}

project.tasks.build.dependsOn "cleanLibFiles"

apply plugin: 'maven-publish'

publishing {
    tasks.publish.dependsOn 'build'
    //artifactId = "forgeessentials"
    publications {
        mavenJava(MavenPublication) {
            groupId "com.forgeessentials"
            artifactId "forgeessentials"
            version "1.4.0-SNAPSHOT"

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.myCompile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }

            artifact sourceJar
            artifact javadocJar
            artifact deobfJar {
                classifier ""
            }
        }
    }

    repositories {
        if (project.hasProperty('forgemaven_user') && project.hasProperty('forgemaven_password')) {
            maven {
                credentials {
                    username project.forgemaven_user
                    password project.forgemaven_password
                }
                url 'http://files.minecraftforge.net/maven/manage/upload'
            }
        } else {
            maven { url "file://${project.projectDir}/build/repo" }
        }
    }
}
